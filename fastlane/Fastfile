ENV["environment"] = "staging"
ENV["git_release_project"] = "releaseMealz"

before_all do |lane, options|
    fastlane_require 'fastlane-plugin-git_clone'

    sh("mkdir -p ../archives")
    sh("export ANDROID_HOME=~/Library/Android/sdk")

    ENV["environment"] = options[:env] || "staging"
    puts ENV["environment"]

    version_check version:options[:version]
    update_version version:options[:version]
end

after_all do |lane, options|
    FastlaneCore::CommandExecutor.execute(
        command: "rm -r ../archives",
        print_all: true,
        error: proc do |error_output|
            # handle error here
        end
    )
    revert_version
end

error do |lane, exception|
    revert_version
end

lane :version_check do |options|
    version = options[:version]
    begin
        sh("
            REGEX_VERSION='[0-9].[0-9].[0-9]+(-[a-z]*)?$'
            [[ \"#{version}\" =~ $REGEX_VERSION ]]
        ")
    rescue => ex
        UI.user_error!("Numéro de version invalide, le numéro de version doit respecter le pattern : 1.0.0 ou 1.0.0-alpha")
    end
end

lane :update_version do |options|
    version = options[:version]
    sh("sed -i '' \"s/##VERSION##/#{version}/g\" ../mealz-shared-analytics/build.gradle.kts")
end

lane :revert_version do |options|
    sh("git restore ../mealz-shared-analytics/build.gradle.kts")
end

lane :fetch_release do |options|
    if ENV["environment"] == "release"
        git_clone(
            git: "git@github.com:miamtech/#{ENV["git_release_project"]}.git",
            path: "../#{ENV["git_release_project"]}"
        )
    else
        git_clone(
            git: "git@github.com:MealzStaging/#{ENV["git_release_project"]}.git",
	        path: "../#{ENV["git_release_project"]}"
        )
    end
end

lane :build_and_update_release do |options|
    if(!Dir.exist? "../../#{ENV["git_release_project"]}")
        UI.user_error!("git release project does not exist")
    end

    gradle(
        task: "publishAllPublicationsToGithubRepository"
    )
    Dir.chdir("..") do
        sh ("cp -R mealz-shared-analytics/build/release/* ../#{ENV["git_release_project"]}")
    end
end

lane :push_release do |options|
    if(!Dir.exist? "../../#{ENV["git_release_project"]}")
        UI.user_error!("git release project does not exist")
    end

    version = options[:version]

    Dir.chdir("../../#{ENV["git_release_project"]}") do
        sh("git checkout main")
        sh("git add ai")
        sh("git commit -m \"Analytics #{version}\"")
        sh("git push ")
    end

    sh("rm -R -f ../../#{ENV["git_release_project"]}")
end

lane :release do |options|
    fetch_release
    build_and_update_release
    push_release version:options[:version]
end
